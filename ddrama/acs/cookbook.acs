#library "cookbook"
#include "zcommon.acs"

// Waffle Iron Studios
// Cookbook Library
// (c) 2012-2017 Sanya K. Waffles

// Libdefines
#libdefine DUDEBRO_TVNUM		8					// Max. MRA Television Breakers
#libdefine WEAPONS_TOTAL		7					// Number of weapons
#libdefine AMMOS_TOTAL			(WEAPONS_TOTAL - 1)	// Only one weapon has no ammo
#libdefine TICS_PER_SECOND		35					// Tics Per Second. Approx 34-35 tics per second
#libdefine TICS_DELAY_MAIN		(TICS_PER_SECOND/7)	// Tics Per Second. Approx 34-35 tics per second
#libdefine CB_HUDSIZE_W			800					// SetHudSize Virtual Width
#libdefine CB_HUDSIZE_H			600					// SetHudSize Virtual Height
#libdefine CB_HUD_ALIGNF_XL		0.2					// Alignment Fixed Point (X) - Top Right
#libdefine CB_HUD_ALIGNF_X		0.4					// Alignment Fixed Point (X) - Centers box, aligns centre
#libdefine CB_HUD_ALIGNF_Y		0.1					// Alignment Fixed Point (Y) - Aligns top of the box
#libdefine CB_HUD_ALIGNF_YC		0.0					// Alignment Fixed Point (Y) - Aligns center of box
#libdefine CB_HUD_X				(((CB_HUDSIZE_W/2)<<16) + CB_HUD_ALIGNF_X)		// Macro for default HUD X-axis def. pos
#libdefine CB_HUD_KEY_Y			(((CB_HUDSIZE_W/2-10)<<16) + CB_HUD_ALIGNF_Y)	// Macro for default HUD Y-axis hint pos
#libdefine CB_HUD_BOSSY			(((CB_HUDSIZE_H/10)<<16) + CB_HUD_ALIGNF_Y)		// Macro for default HUD Y-axis boss pos
#libdefine CB_HUD_CRACKER_Y		(((CB_HUDSIZE_H/2+100)<<16) + CB_HUD_ALIGNF_YC)	// Macro for default HUD Y-axis cracker pos

#libdefine CB_HUD_CRACKERHOLD	8.0		// Cracker Hold time (in fixed)
#libdefine CB_HUD_HINTHOLD		8.0		// Hint Hold fime (in fixed)

// IDs for HUDMessage - Lower IDs overlap higher IDs
#libdefine HUDDISPID_EPOCH		500							// base ID for which other IDs are derived from
#libdefine HUDDISPID_HINT		(HUDDISPID_EPOCH)			// Hint Message ID
#libdefine HUDDISPID_MESG		(HUDDISPID_EPOCH - 20)		// Generic Message ID
#libdefine HUDDISPID_BOSSBAR	(HUDDISPID_EPOCH - 50)		// Boss Bar ID
#libdefine HUDDISPID_BOSSBAR2	(HUDDISPID_EPOCH - 51)		// Boss Bar ID (Alt)
#libdefine HUDDISPID_ENDTALLY	(HUDDISPID_EPOCH - 60)		// End Tally
#libdefine HUDDISPID_USEKEY		(HUDDISPID_EPOCH - 61)		// Press +use
#libdefine HUDDISPID_CRACKER	(HUDDISPID_EPOCH + 100)		// The Cracker Joke ID

// Aspect Ratio defines
#libdefine ASPECT_4_3			(4.0/3)		//  4:3
#libdefine ASPECT_5_4			1.25		//  5:4
#libdefine ASPECT_16_9			(16.0/9)	// 16:9
#libdefine ASPECT_16_10			1.6			// 16:10
#libdefine DDFUNC_GLASS_FLAGS	BLOCKF_EVERYTHING | BLOCKF_USE | BLOCKF_HITSCAN
#libdefine DDFUNC_GLASS_ACTFL	SPAC_Impact
// End Libdefines

// ==========================
// Generic Cookbook funcs
// ==========================

// -------------------------->>>>
// NOTES ON FIXED VALUE FRACTIONS
// -------------------------->>>>
// Fixed Values are used in ACS
// instead of 'true' floating
// point. This is because even
// in 2015 Doom engines still
// use 32-bit integers as
// standard. These numbers are
// little-endian, meaning the
// right-most bits are the most
// significant bit in memory.
//
// The first 16-bits RTL are
// the fraction, the remaining
// 16-bits are the value. This
// means it's really stored as
// a whole 32-bit integer in
// memory. This is because
// Doom used fixed-point as
// Floating-Point units were
// not exactly cheap in 1993,
// thus not common.
//
// So any functions dealing with
// fixed points use 'int' types
// for both stack and argument
// variables.
// -------------------------->>>>

// --------------------------
// integer: returns integer
// part of fixed value only
// arg0 -> int num: value
//		to trim
// --------------------------
function int integer(int num)
{
   return (num & 65535.0);
}

// --------------------------
// frac: returns fraction
// part of fixed value only
// arg0 -> int num: value
//		to trim
// --------------------------
function int frac(int num)
{
   return (num & 65535);
}

// --------------------------
// abs: returns absolute
// value. Basically if it's
// negative, return positive
// value.
// arg0 -> int num: value
//		to evaluate
// --------------------------
function int abs(int x)
{
    if (x < 0) return -x;
	
    return x;
}

// --------------------------
// pctClamp: forces the value
// given to stay within the
// range of 0 to 100.
// arg0 -> int x: value
//		to clamp
// --------------------------
function int pctClamp(int x)
{
	if (x > 100) return 100;
	
	if (x < 0) return 0;
	
	return x;
}

// --------------------------
// checknotzero: returns
// true if the number is
// a positive, non-zero
// number. However, if
// negative or zero, it
// returns false.
// arg0 -> int x: value
//		to check
// --------------------------
function bool checknotzero(int x)
{
	if (x > 0) return true;
	
	return false;
}

// --------------------------
// fround: returns a
// rounded fixed-point
// number. Calls floor.
// arg0 -> int f: value
//		to check
// --------------------------
function int fround(int f)
{
	return floor(f + 0.5);
}

// -------------------------->>>>
// COOKBOOK INFO:
// Some of the above funcs are
// modified from existing ZDoom
// ACS functions, with some cleanup.
//
// Any original or heavily modified
// functions will have the func_*
// prefix. The exception is the
// GetAspectRatio function, because
// I wanted to make it distinguishable
// from the abs function
// -------------------------->>>>

function bool func_CheckStr(str _s)
{
	return !(StrLen(_s) <= 0);
}

// Check if a key is pressed but not being constantly
// held down
function bool func_CheckButtonPressed(int button)
{
	return ((GetPlayerInput(-1, INPUT_BUTTONS) & button) && !((GetPlayerInput(-1, INPUT_OLDBUTTONS) & button)));
}

// Check if a key or button is being held down
function bool func_CheckButtonHeld(int button)
{
	return !!(GetPlayerInput(-1, INPUT_BUTTONS) & button);
}

// Check if a key or button is NOT being held down
function bool func_CheckButtonUp(int button)
{
	return !(GetPlayerInput(-1, INPUT_BUTTONS) & button);
}

// Set Player Invulnerable and Totally Forzen
function void func_SetPlayerImmune(void)
{
	SetPlayerProperty(1, 2, PROP_INVULNERABILITY);
	SetPlayerProperty(1, 1, PROP_TOTALLYFROZEN);
}

// Unset Player Invulnerable and Totally Forzen
function void func_UnSetPlayerImmune(void)
{
	SetPlayerProperty(1, 0, PROP_INVULNERABILITY);
	SetPlayerProperty(1, 0, PROP_TOTALLYFROZEN);
}

int ctrMRATVs = 0;				// Dudebro TV counter

// Stop Music
function void func_StopMusic(void)
{
	SetMusic("");
}

// Wrapper script for above
script "DDLib_StopMusic" (void)
{
	func_StopMusic();
}

// Set Boss Battle Music
function void func_BossMusic(void)
{
	SetMusic("D_HORSE");
}

// Resume default music
function void func_DefaultMusic(void)
{
	SetMusic("*");
}

// Clear a message with _id
function void func_Clear(int _id)
{
	if (_id > 0) HudMessage(s:""; HUDMSG_PLAIN, _id, CR_UNTRANSLATED, 0.0, 0.0, 0);
}

// Clear a range of TIDs. _id1 and _id2 can be reversed, the
// code will compensate
function void func_ClearRange(int _id1, int _id2)
{
    int _start_id = 0;	// Starting range
    int _end_id = 0;	// Ending Range

	// If any of them are zero or less than zero, bail out
	if (_id1 <= 0 || _id2 <= 0) return;
	
	// Determine the starting range
    if (_id1 < _id2)
    {
        _start_id = _id1;
        _end_id = _id2;
    }
    else if (_id1 > _id2)
    {
        _end_id = _id1;
        _start_id = _id2;
    }
    else
	{
		func_Clear(_id1);
        return;
	}
	
	// Do the actual clearing
    for (int _ctr = _start_id; _ctr < _end_id; _ctr++)
    {
        func_Clear(_ctr);
    }
}

// Set font to BIGFONT
function void func_SetFontToBig(void)
{
	SetFont("BIGFONT");
}

//Init Screen
function void func_InitScreen(void)
{
	SetHudSize(CB_HUDSIZE_W, CB_HUDSIZE_H, false);	// Init Screen just in case.
}

// mute the hostage manually
function void func_MuteHostage(int _hid)
{
	if(_hid > 0) SetActorState(_hid, "Mute");
}

// Wrapper script for func_MuteHostage
script "DDLib_MuteHostage" (int _hid)
{
	func_MuteHostage(_hid);
}
