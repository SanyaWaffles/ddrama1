/* *******************************************************************
 *		shrunken_enemy.zsc
 *
 *		Grub enemy
 *
 *		As long as you attribute it to me in some
 *		way I don't mind people using this. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// Shrunken Enemy Dies when you squash it
Class DD_ShrunkenEnemy : MorphedMonster
{
	Default
	{
		Scale 0.12;
		Health 10;
		Radius 10;
		Height 20;
		Mass 30;
		Speed 2;
		DamageFactor "Normal", 0.0;
		DamageFactor "Rocket", 0.0;
		DamageFactor "Webbing", 0.0;
		DamageFactor "Expand", 0.0;
		DamageFactor "Stomped", 1.0;
		PainChance 255;
		Species "TrollGrub";
		MeleeRange 14;
		MaxStepHeight 12;
		Translation "16:31=224:232";
		
		Monster;
		
		+DontGib
		+NoBlood
		+CantSeek
		+NotAutoAimed
		+DontMorph
		+FloorClip
		+Frightened
		+NeverRespawn
		-CountKill
		-ActivateMCross
		-CanPushWalls
		-CanUseWalls
	}
	
	/*	***********************************************
	 *			A_DDGivePlayerOneLiner();
	 *		Gives the player a token obbject
	 *		that causes the player pawn to sound
	 *		off a one liner.
	 *	***********************************************/
	void A_DDGivePlayerOneLiner(int index = 0)
	{
		static const Class<Inventory> snarkobj[] =
		{
			"DD_VOX_SnarkEnemies",
			"DD_VOX_SnarkEnemiesGibbed"
		};
		
		// Check if actor killing this enemy is not null,
		// and is a player target,
		// and is alive (health greater than 0)
		if(target && (target is "PlayerPawn") && target.health > 0)
		{
			if (index < 0 || index > 2) index = 0;
			
			A_GiveToTarget(snarkobj[index], 1);
		}
	}
	
	state A_DDGrubChase()
	{
		A_Chase(null, null);
		
		if (CheckIfCloser(target, (radius + meleerange), false))
		{
			return ResolveState("JustDie");
		}
		return null;
	}
	
	void A_DDGrubDeath()
	{
		Actor mo = null;
		int i;

		for(i = (Random[Jibs]()&5)+5; i; i--)
		{
			mo = Spawn("DD_BarfChunk1", pos, ALLOW_REPLACE);
			if (mo)
			{
				mo.Vel.X = Random2[Jibs]() / 64.;
				mo.Vel.Y = Random2[Jibs]() / 64.;
				mo.Vel.Z = ((Random[Jibs]() & 7) + 5) * 0.75;
			}
		}
	}
	
	void A_DDGrubDeathFin()
	{
		A_SetScale(0.06);
		A_DDGivePlayerOneLiner();
		A_TakeFromTarget("DD_CrushFlag", 1);
	}

	States
	{
		Spawn:
			GRUB A 8;
			Goto LookReal;
		
		LookReal:
			GRUB AB 2 A_DDGrubChase;
			Loop;
		
		JustDie:
			GRUB A 1 A_Die("Stomped");
			Goto Death;
		
		Death:
		Death.Stomped:
			GRUB A 3
			{
				A_GiveToTarget("DD_CrushFlag", 1);
				A_NoBlocking();
				A_SetScale(0.035);
				A_PlaySound("generic/squashx", CHAN_BODY);
			}
			GIBX A 2 A_DDGrubDeath;
			GIBX A 2 A_SetScale(0.04);
			GIBX A 3 A_SetScale(0.05);
			GIBX A 35 A_DDGrubDeathFin;
			GIBX A 5;
			GIBX A 3 A_FadeOut(0.1, true);
			Wait;
	}
}
