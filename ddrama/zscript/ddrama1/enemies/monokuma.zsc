/* *******************************************************************
 *		monokuma.zcs
 *		Monokuma Boss
 *
 *		As long as you attribute it to me in some
 *		way I don't mind people using this. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

Class DD_MonoFiredRocket : DD_FiredRocket
{
	Default
	{
		DeathSound "monokuma/rocketx";
		Obituary "$DD_OB_MONOKUMA";
	}
	
	void A_DDMonoRocketExplode()
	{
		A_SetRenderStyle(0.7, STYLE_Add);
		A_Explode(16, 32);
	}

	States
	{
		Death:
			EXPL A 3 Bright A_DDMonoRocketExplode;
			EXPL BCDEFG 3 Bright;
			EXPL H 1 Bright A_FadeOut(0.3);
			Wait;
	}
}

Class DD_MonoFiredBlazerblast : DD_MonoFiredRocket
{
	Default
	{
		Scale 0.25;
		Radius 16;
		Height 32;
		Translation "160:175=16:31", "2:15=130:143", "32:47=176:180";
		DeathSound "monokuma/rocketbigx";
		Obituary "$DD_OB_MONOKUMA";
	}
	
	const DD_CMF_MONOFIREFLAGS = CMF_TRACKOWNER|CMF_ABSOLUTEANGLE;

	void A_DDMonoBlazerblastAtk()
	{
		A_SpawnProjectile("DD_MonobearBlazerFx", 40, 0, -22.5, DD_CMF_MONOFIREFLAGS);
		A_SpawnProjectile("DD_MonobearBlazerFx", 40, 0,	  0, DD_CMF_MONOFIREFLAGS);
		A_SpawnProjectile("DD_MonobearBlazerFx", 40, 0, -22.5, DD_CMF_MONOFIREFLAGS);
		A_SetRenderStyle(0.7, STYLE_Add);
		A_Explode(32, 32);
	}

	States
	{
		Death:
			EXPL A 3 Bright A_DDMonoBlazerblastAtk;
			EXPL BCDEFG 3 Bright;
			EXPL H 1 Bright A_FadeOut(0.3);
			Wait;
	}
}

Class DD_MonobearBlazerFx : DD_ProjectileActor
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.7;
		Scale 0.25;
		Translation "144:151=16:31", "109:111=20:22";
		Damage 4;
		Speed 8;
		
		+FloorHugger
		+Ripper
	}

	States
	{
		Spawn:
			FIRE ABCDCB 2 Bright;
			FIRE B 1 Bright A_FadeOut(0.1, true);
			Wait;
	}
}

Class DD_MonoDespairBall : DD_DespairPlasmaBall
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 20;
		Damage 2;
		SeeSound "monokuma/plasmaf";
		DeathSound "monokuma/plasmax";
		Obituary "$DD_OB_MONOKUMA";
	}
}

Class DD_MonokumaExplosion : DD_ProjectileActor
{
	Default
	{
		Radius 12;
		Height 24;
		Speed 0;
		VSpeed 4;
		Gravity 0.0;
		RenderStyle "Add";
		Alpha 0.7;
		Scale 0.35;
		DamageType "Rocket";
		DeathSound "monokuma/explode";

		+NoGravity
		+Float
		+NonShootable
		+NoTeleport
		+NoBlockmap
	}

	States
	{
		Spawn:
			EXPL A 1 Bright ThrustThingZ(0, 6, 0, 1);
			Goto Death;
		
		Death:
			EXPL A 2 Bright A_Explode(16, radius*2);
			EXPL BCDEFG 3 Bright;
			EXPL H 1 Bright A_FadeOut(0.3);
			Wait;
	}
}

Class DD_MonokumaHead : DD_Actor
{
	Default
	{
		Radius 32;
		Height 60;
		Speed 0;
		Mass 500;
		Scale 0.26;
		
		DamageType "Rocket";
		DeathSound "monokuma/headx";

		+Solid
		+FloorClip
	}
	
	void A_DDMonoKHeadExplode()
	{
		A_SetRenderStyle(0.7, STYLE_Add); // A_SetTranslucent(0.7, 1);
		bNoGravity = false;
		bFloat = true;
		bFloorClip = false;
		FloorClip = 0;
		ThrustThingZ(0, 6, 0, 1);
		A_ScreamAndUnblock();
		// A_Explode(24, 256);
	}

	States
	{
		Spawn:
			MHED A 35;
			MHED A 35 Bright;
			MHED A 20;
			MHED A 10 Bright;
			MHED A 5;
			MHED A 5 Bright;
			MHED A 5;
			MHED A 5 Bright;
		Death:
			EXPL A 3 Bright A_DDMonoKHeadExplode;
			EXPL BCDEFG 3 Bright;
			EXPL H 1 A_FadeOut(0.3);
			Wait;
	}
}

Class DD_Monokuma : DD_Boss
{
	Default
	{
		//$Sprite MONOA0
		//$Title "Monokuma"
		
		Health 5000;
		Scale 0.26;
		Radius 56;
		Height 176;
		Mass 95000;
		Speed 56;
		
		PainChance 60;
		Species "Mecha";
		
		SeeSound "monokuma/sight";
		DeathSound "monokuma/death";
		ActiveSound "monokuma/active";
		
		Obituary "$DD_OB_MONOKUMA";
		
		+QuickToRetaliate
		+NoTarget
		+DontMorph
		+NeverRespawn
		+BossDeath
		+NoPain
		+Boss
	}
	
	const DD_MONOK_TIME = 56;
	const DD_MONOK_HEALTHSTAGE2 = 2250;
	const DD_MONOK_HEALTHSTAGE3 = 850;
	const DD_MONOK_PLASMASTAGE = 1;		// Pink Despair Balls
	const DD_MONOK_ROCKETSTAGE = 2;		// Rocket Launcher
	const DD_MONOK_FINALSTAGE = 3;		// Constant Rockets
	
	int stage;
	int hoverstate;
	int turretid;
	int exittag;
	
	override void PostBeginPlay()
	{
		if (args[0] > 0)
			turretid = args[0];
		else
			turretid = 666;
		
		hoverstate = 0;
		
		stage = DD_MONOK_PLASMASTAGE;
	}
	
	States
	{
		Spawn:
			MONO A 10 A_DDramaLook;
			Wait;
		
		See:
			MONO ABAC 2
			{
				A_Chase(null, "Missile");
			}
			MONO C 0
			{
				hoverstate++;
				
				if (hoverstate >= DD_MONOK_TIME)
				{
					hoverstate = 0;
					return ResolveState("Hover");
				}
				
				return ResolveState(null);
			}
			Loop;
		
		Hover:
			MONO J 2
			{
				ThrustThingZ(0, 32, 0, 1);
				Thing_Activate(turretid);
				A_PlaySound("monokuma/thrust", CHAN_BODY, 1.0, true);
				A_SetRenderStyle(0.5, STYLE_Translucent); // A_SetTranslucent(0.5);
				
				bInvulnerable = true;
			}
			MONO KJKJKJ 2;
			MONO K 2 ThrustThingZ(0, 32, 0, 1);
			MONO JKJKJKJKJKJKJKJKJKJKJKJKJKJKJKJKJKJKJKJ 4 ThrustThingZ(0, 32, 0, 1);
			MONO K 4 Thing_Deactivate(turretid);
			MONO JKJKJKJK 2 ThrustThingZ(0, 32, 1, 1);
			MONO K 1
			{
				ThrustThingZ(0, 0, 1, 0);
				bInvulnerable = false;
				A_SetRenderStyle(1.0, STYLE_Translucent); // A_SetTranslucent(1.0);
				A_StopSound(CHAN_BODY);
			}
			Goto SetMonokumaState;
			
		SetMonokumaState:
			MONO D 0
			{
				if (health <= DD_MONOK_HEALTHSTAGE3)
				{
					stage = DD_MONOK_FINALSTAGE;
				}
				
				if (health <= DD_MONOK_HEALTHSTAGE2 && health > DD_MONOK_HEALTHSTAGE3)
				{
					stage = DD_MONOK_ROCKETSTAGE;
				}
				
				if (health > DD_MONOK_HEALTHSTAGE2)
				{
					stage = DD_MONOK_PLASMASTAGE;
				}
			}
			MONO D 0 A_Jump(256, "See", "See", "See", "Missile", "Missile");
			Goto See;
			
		Missile:
			MONO D 0 Bright
			{
				if (stage == DD_MONOK_ROCKETSTAGE)
				{
					return ResolveState("RocketAttack");
				}
				if (stage == DD_MONOK_FINALSTAGE)
				{
					return ResolveState("CrazyAttack");
				}
				return ResolveState(null);
			}
			Goto PlasmaAttack;
		
		PlasmaAttack:
			MONO D 1 Bright A_FaceTarget;
			MONO D 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 90);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 45);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -45);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -90);
			}
			MONO D 1 Bright;
			MONO E 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 0);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 135);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -135);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 180);
			}
			MONO E 1 Bright;
			MONO F 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -90);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -45);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 45);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 90);
			}
			MONO G 1 Bright;
			MONO G 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 180);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 135);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -135);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 0);
				hoverstate++;
			}
			Goto See;
			
		RocketAttack:
			MONO D 1 Bright A_FaceTarget;
			MONO D 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 90);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 45);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -45);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -90);
			}
			MONO D 1 Bright;
			MONO E 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 0);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 135);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -135);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 180);
			}
			MONO E 1 Bright;
			MONO F 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -90);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -45);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -45);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 90);
			}
			MONO F 1 Bright;
			MONO G 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 180);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 135);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -135);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 0);
				hoverstate++;
			}
			Goto See;
			
		CrazyAttack:
			MONO D 1 Bright A_FaceTarget;
			MONO D 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 90);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -90);
			}
			MONO D 1 Bright;
			MONO E 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 90);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -90);
			}
			MONO E 1 Bright;
			MONO F 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 180);
			}
			MONO F 1 Bright;
			MONO G 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredBlazerblast", 144, 0);
				A_SpawnProjectile("DD_MonoFiredBlazerblast", 144, 0, 180);
			}
			MONO G 1 Bright;
			MONO D 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, -90);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 90);
			}
			MONO D 1 Bright;
			MONO E 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, -90);
				A_SpawnProjectile("DD_MonoFiredRocket", 144, 0, 90);
			}
			MONO E 1 Bright;
			MONO F 2 Bright
			{
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0, 180);
				A_SpawnProjectile("DD_MonoDespairBall", 144, 0);
			}
			MONO G 2 Bright
			{
				A_SpawnProjectile("DD_MonoFiredBlazerblast", 144, 0, 180);
				A_SpawnProjectile("DD_MonoFiredBlazerblast", 144, 0);
				hoverstate++;
			}
			Goto See;
			
		Death.Rocket:
		Death.Webbing:
		Death.Expand:
		Death.Shou:
		Death.Extreme:
		Death:
			MONO D 1
			{
				A_DDGivePlayerOneLiner();
				A_ScreamAndUnblock();
			}
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			MONO DD 7 A_SpawnItemEx("DD_MonokumaExplosion", random[DD_MONOKUMADEAD](32, 96), random[DD_MONOKUMADEAD](32, 96), ((random[DD_MONOKUMADEAD](32, 96)) - (height/2)));
			MONO D 4;
			TNT1 A 1 A_SpawnItemEx("DD_MonokumaHead", 0, 0, 72);
			TNT1 A 150;
			TNT1 A -1;
			Stop;
	}
}
