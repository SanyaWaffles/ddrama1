/* *******************************************************************
 *		pow_axx_spray.zsc
 *
 *		Axx Spray Grenade for Daytime Drama
 *
 *		As long as you attribute it to me in some
 *		way I don't mind people using this. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// The actual gas emitted from the thrown canister
Class DD_AxxGasObj : DD_Actor
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.6;
		Radius 24;
		Height 10;
		Speed 0;
		VSpeed 4;
		DamageType "Dorito";

		+NoGravity
		+Float
	
	}
	
	void A_AxxCycle()
	{
		if (Alpha == 0.6)
		{
			A_PlaySound("axxspray/spray", CHAN_VOICE);
		}
		
		ThrustThingZ(0, 4, 0, 1);
		
		A_SetRenderStyle(Alpha - 0.2, STYLE_Add);
	}

	States
	{
		Spawn:
			PAXS ABCDE 4 NoDelay A_AxxCycle;
			Stop;
	}
}

// The projectile thrown from the inventory item itself
Class DD_AxxProjectile : DD_ProjectileActor
{
	Default
	{
		Radius 12;
		Height 10;
		Damage 0;
		Speed 13;
		BounceType "Doom";
		BounceCount 4;
		DamageType "Dorito";

		+Ripper
	}
	
	const AXX_MAXCTR = 56;
	
	int axxctr;
	int axx_x;
	int axx_y;
	int axx_explrad;
	int axx_expldam;
	
	// Initiate some values
	void A_InitAxxStuff()
	{
		bNoGravity = false;
		
		axxctr = 0;
		axx_explrad = 0;
		axx_expldam = 0;
	}
	
	// We have hit something, start applying gravity heavily
	void A_AxxHit()
	{
		bNoGravity = false;
		Gravity = 4;
		
		A_PlaySound("axxspray/shotx", CHAN_BODY);
	}
	
	// randomly cause the offsets to be affected by signage
	private int DDFunc_AxxFlip(int v)
	{
		return Random[AxxSpray](0, 1) ? -v : v;
	}
	
	// Calculate explosion efffects and radius
	void A_CalcAxx()
	{
		axx_explrad =	Random[AxxSpray](12, 20);	// explosion radius
		axx_expldam =	Random[AxxSpray](48, 60);	// explosion damage
		
		axx_x = DDFunc_AxxFlip(Random[AxxSpray](-12, 12));	// offset x
		axx_y = DDFunc_AxxFlip(Random[AxxSpray](-12, 12));	// offset y;
	}
	
	// Spawn gas all over the place, returns true once Axx gas counter
	// has reached limit
	state A_SpawnAxxGas()
	{
		A_CalcAxx();	// do some calculations
		
		bNoGravity = false;
		
		A_SetTics(Random[AxxSpray](2,5));	// randomize tics
		
		// do a loop to spray three times times
		for (int i = 14; i > 0; i--)
		{
			A_SpawnItemEx("DD_AxxGasObj", axx_x, -axx_y, 8, flags:SXF_TRANSFERPOINTERS);
			A_Explode(damage:axx_expldam, distance:axx_explrad, pufftype:"DD_BulletPuff", damagetype:"Dorito");
		}
		
		axxctr += Random[AxxSpray](1, 2);	// increment counter by 1 or 2
		
		// check if we've reached the limit
		if(axxctr > AXX_MAXCTR)
			return ResolveState("DeathFinal");	// we're done here!
		
		return ResolveState(null);	// we're done here!
	}

	States
	{
		Spawn:
			PAXP ABCDABC 2;
			PAXP D 2 A_InitAxxStuff;
			PAXP ABCD 2;
			Loop;
		
		XDeath:
		Crash:
		Death:
			PAXP E 1 A_AxxHit;
			Goto DeathLoop;
		
		DeathLoop:
			PAXP F 2 A_SpawnAxxGas;
			Loop;
		
		DeathFinal:
			PAXP F 2 A_FadeTo(0.0, 0.5, true);	// Fade Out
			Loop;
	}
}

// The actual pickup and inventory item
Class DD_AxxSpray : CustomInventory
{
	Default
	{
		//$Sprite PAXXA0
		//$Title "Fake Axx Spray Grenade"
		//$Category "Ammunition"

		Scale 0.12;
		Radius 12;
		Height 24;
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
		Inventory.InterHubAmount 5;
		Inventory.PickupMessage "$DD_GOTAXX";
		Inventory.PickupSound "pickups/generic";
		Inventory.UseSound "axxspray/throw";
		Inventory.Icon "STAXXE";

		-Inventory.InvBar
		-Inventory.AutoActivate
	}

	States
	{
		Spawn:
			PAXX A -1;
			Stop;
			
		Use:
			TNT1 A 0 A_FireProjectile("DD_AxxProjectile");
			Stop;
	}
}