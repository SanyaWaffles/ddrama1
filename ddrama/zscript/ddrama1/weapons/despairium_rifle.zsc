/* *******************************************************************
 *		despairium_rifle.zsc
 *
 *		Despairium Rifle
 *
 *		As long as you attribute these functions to me in some
 *		way I don't mind people using these. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// Despair Cells Pickup
Class DD_Despairium : Ammo
{
	Default
	{
		//$NotAngled
		//$Category "Ammunition"
		//$Color 6
		//$Sprite AMM6A0
		//$Title "Despairium-45 tank"
		
		Scale 0.1;
		Radius 22;
		Height 32;
		Inventory.Icon "AMM6A0";
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTDGCELLS";
		Inventory.Amount 30;
		Inventory.MaxAmount 300;
		Ammo.BackpackAmount 60;
		Ammo.BackpackMaxAmount 600;
	}

	States
	{
		Spawn:
			AMM6 A -1;
			Stop;
	}
}

Class DD_DroppedAmmoDespairum : DD_Despairium
{
	Default
	{
		Scale 0.20;
		Radius 20;
		Height 32;
		Inventory.Amount 20;
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTSMALLDESPAIR";

		+DontGib
		+Inventory.IgnoreSkill
	}

	States
	{
		Spawn:
			SAM4 A 280 Bright;
			Stop;
	}
}

Class DD_AirCompressor : Inventory
{
	Default
	{
		//$Title "Coolant Tank"
		//$Sprite AIRCA0
		//$Category "Ammunition"
		//$NotAngled
		
		Radius 14;
		Height 36;
		Scale 0.12;
		Inventory.Icon "STCOMPR";
		Inventory.PickupMessage "$DD_GOTAIRCOMP";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupSound "misc/upgradenotify";

		+Inventory.BigPowerUp
	}
	
	override bool HandlePickup (Inventory item)
	{
		A_SetInventory("DD_HasAirCompressor", 1);
		
		return Super.HandlePickup(item);
	}

	States
	{
		Spawn:
			AIRC A -1;
			Stop;
	}
}

// Despairthrower
Class DD_DespairiumRifle : DD_Weapon
{
	Default
	{
		//$Title "Despairium 45 Rifle"
		//$Sprite GUN6A0
		Scale 0.10;
		Radius 28;
		Height 28;
		Inventory.Icon "GUN6A0";
		Inventory.PickupMessage "$DD_GOTDESPGUN";
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 30;
		Weapon.BobSpeed 0.4;
		Weapon.AmmoType "DD_Despairium";
		Weapon.Kickback 250;
		Tag "$DD_GOTDESPGUN";
	}
	
	action bool CheckForCoolant()
	{
		return CountInv("DD_AirCompressor");
	}
	
	action int CheckDespairCounter()
	{
		return CountInv("DD_UnfungoCounter");
	}
	
	States
	{
		Ready:
			DSPG A 1
			{
				A_DDWeaponReady();
				
				A_TakeInventory("DD_UnfungoCounter", random[Despairium](1,3));
				
				if (CheckForCoolant())
				{
					A_TakeInventory("DD_UnfungoCounter", 255);
				}
			}
			Loop;
		
		Deselect:
			DSPG A 1 A_Lower;
			Wait;
		
		Select:
			DSPG A 1
			{
				if (CheckDespairCounter())
					A_TakeInventory("DD_UnfungoCounter", 2);
				
				A_Raise();
			}
			Loop;
		
		Fire:
			DSPG A 5
			{
				static const Class<Actor> despairball[] = {
					"DD_DespairPlasmaBall",
					"DD_DespairPlasmaBallV2",
					"DD_DespairPlasmaBallV3"
				}
				
				int tix = 3;	// default tics..
				int proji = 0;	// set projectile index
				
				// rather than call it each frame multiple times...
				bool bCool = CheckForCoolant();			// check for coolant/air comp.
				bool bShou = CheckForPepperPowerup();	// check for genocider mode
				
				A_GunFlash();
				A_TakeInventory("DD_CrushFlag", 1);
				
				// very complex... can this be more simplified?
				if (bShou)
				{
					if (bCool)
					{
						// if you have both...
						tix = 1;
						proji = 2;	// set strongest projectie
					}
					else
					{
						tix = 2;
						proji = 1;	// set stronger projectie
					}
				}
				else if (bCool)
				{
					tix = 2;
					proji = 2;
				}
				else
				{
					tix = 3;	// set strongest projectie
					proji = 0; 	// set basic projectie
				}
				
				// fire the proper projectile
				A_FireProjectile(despairball[proji]);
				// set the appropriate tics
				A_SetTics(tix);
				
				if (!CheckForCoolant())
				{
					A_GiveInventory("DD_UnfungoCounter", Random[Despairium](1, 3));
					
					if (CheckDespairCounter() >= 32)
					{
						return ResolveState("Cooldown");
					}
				}
				
				return ResolveState(null);
			}
			DSPG A 3
			{
				A_SetTics((CheckForPepperPowerup() || CheckForCoolant()) ? 2 : 3);	// this is alot simpler to do...
			}
			DSPG A 1 A_ReFire;
			Goto Ready;
		
		Cooldown:
			DSPG A 1
			{
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);	// we don't want the player to be able to fire...
				A_PlaySound("weapons/despairhiss", CHAN_VOICE);	// weapon needs to vent.
			}
		CooldownLoop:
			DSPG A 2
			{
				A_GunFlash("CooldownSmoke");	// hissing and smoke
				A_TakeInventory("DD_UnfungoCounter", random[Despairium](1,3));	// remove random amounts of 'unfungo counter'
				
				return CheckDespairCounter() ? ResolveState(null) : ResolveState("Ready");	// loop until we cool down.
			}
			Loop;
			
		CooldownSmoke:
			DS2F AB 1;
			Stop;
			
		Flash:
			DSPF AB 1 Bright A_Light1;
			TNT1 A 0 A_Light0;
			Stop;
		
		Spawn:
			GUN6 A -1;
			Stop;
	}
}

Class DD_HasAirCompressor : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
	}
}

//$GZDB_SKIP

Class DD_UnfungoCounter : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 32;
	}
}

Class DD_DespairPlasmaBall : DD_ProjectileActor
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 24;
		Damage 5;
		DamageType "Despair";
		Scale 0.1;
		RenderStyle "Add";
		Alpha 0.6;
		SeeSound "weapons/despairf";
		DeathSound "weapons/despairx";
	}

	States
	{
		Spawn:
			PLSP ABCD 3 Bright;
			Loop;
		
		Death:
			PLSP EFGHIJ 4 Bright;
			Stop;
	}
}

// Despair Plasma Ball 2
Class DD_DespairPlasmaBallV2 : DD_DespairPlasmaBall
{
	Default
	{
		Radius 6;
		Height 6;
		Speed 28;
		Damage 3;
		Scale 0.08;
		RenderStyle "Add";
		Alpha 0.6;
	}

	States
	{
		Spawn:
			PLSP ABCD 2 Bright;
			Loop;
	}
}

// Despair Plasma Ball 3
Class DD_DespairPlasmaBallV3 : DD_DespairPlasmaBallV2
{
	Default
	{
		Radius 6;
		Height 6;
		Speed 32;
		Damage 4;
		Scale 0.08;
		RenderStyle "Add";
		Alpha 0.6;
	
	
		+Ripper
		+NoBossRip
	}

	States
	{
		Spawn:
			PLSP ABCD 2 Bright;
			Loop;
		
		Death:
			PLSP EFGHIJ 4 Bright;
			Stop;
	}
}