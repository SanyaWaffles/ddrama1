/* *******************************************************************
 *		rocket_launcher.zsc
 *
 *		Rocket Launcher
 *
 *		As long as you attribute these functions to me in some
 *		way I don't mind people using these. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// A rocket trail
Class DD_RocketTrail : DD_Actor
{
	Default
	{
		Scale 0.06;
		Height 2;
		Radius 2;
		Speed 0;
		VSpeed 0;
		FloatSpeed 0;

		+NoBlockmap
	}

	States
	{
		Spawn:
			SMKF A 2 Bright
			{
				A_Stop();
				A_FadeOut(0.2, (FTF_REMOVE|FTF_REMOVE));
			}
			Loop;
	}
}

// A straight-firing
Class DD_FiredRocket : DD_ProjectileActor
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		DamageType "Rocket";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Scale 0.08;
	}

	States
	{
		Spawn:
			MISL A 1 Bright A_SpawnItemEx("DD_RocketTrail", -4, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			Loop;
		
		Death:
			EXPL A 3 Bright
			{
				A_SetScale(0.12, 0.12);
				A_SetRenderStyle(0.66, STYLE_Add);
				A_Explode(128, 160);
			}
			EXPL B 3 Bright A_Quake(2, 8, 0, 1096);
			EXPL CDEFGH 3 Bright A_FadeOut(0.3);
			Stop;
	}
}

// A heat seeker rocket train
Class DD_RocketTrail2 : DD_RocketTrail
{
	Default
	{
		Scale 0.03;
	}
}

// A heat seeker mode rocket
Class DD_FiredRocketSeeker : DD_FiredRocket
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 16;
		Damage 16;
		DamageType "Rocket";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Translation "160:175=176:191";

		+SeekerMissile
		+ScreenSeeker
	}

	States
	{
		Spawn:
			MISL A 1 Bright
			{
				A_SeekerMissile(8, 5, (SMF_PRECISE|SMF_LOOK|SMF_CURSPEED));
				A_SpawnItemEx("DD_RocketTrail2", -4, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			}
			Loop;
		
		Death:
			EXPL A 3
			{
				A_SetTranslucent(0.66, 1);
				A_Explode(112, 160);
			}
			EXPL B 3 Bright A_Quake(2, 4, 0, 1024);
			EXPL CDEFGH 3 Bright A_FadeOut(0.3);
			Stop;
	}
}

// Drunk trail
Class DD_RocketTrail3 : DD_RocketTrail
{
	Default
	{
		Scale 0.02;
	}
}

// A smol mininuke
Class DD_SmolRocket : DD_FiredRocket
{
	Default
	{
		Radius 8;
		Height 8;
		Speed 20;
		Damage 12;
		DamageType "Rocket";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Scale 0.02;
	}

	States
	{
		Spawn:
			MISL A 1 Bright A_SpawnItemEx("DD_RocketTrail3", -4, flags: SXF_NOCHECKPOSITION);
			Loop;
		
		Death:
			EXPL A 3 Bright
			{
				A_SetScale(0.06, 0.06);
				A_SetTranslucent(0.66, 1);
				A_Explode(8, 8);
			}
			EXPL BCDEFGH 3 Bright A_FadeOut(0.1);
			Stop;
	}
}

// A rocket that is drunk as fuck
Class DD_DrunkRocket : DD_FiredRocket
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 16;
		Damage 16;
		DamageType "Rocket";
		SeeSound "weapons/rocklf";
		DeathSound "weapons/rocklx";
		Translation "160:175=32:47";

		+SeekerMissile
		+ScreenSeeker
	}
	
	int drunk1, drunk2;	// drunkenness randomizers
	
	// We drunkenly seek enemies...
	void A_DrunkMissileSeek()
	{
		drunk2 = Random[DrunkAF](0, 255);
		
		// if drunk2 can be divided by 2 cleanly, we must
		// seek.
		if (!(drunk2 % 2))
		{
			A_SeekerMissile(8, 5, (SMF_PRECISE|SMF_LOOK|SMF_CURSPEED));
			
			drunk1 = Random[DrunkAF](-2, 2);
		}
		else
		{
			if (drunk2 >= 127) A_SetAngle(angle + drunk1);
			else if (drunk2 < 64) A_SetAngle(angle - (drunk1 - 1));
		}
		
		A_SpawnItemEx("DD_RocketTrail3", -4, flags: SXF_NOCHECKPOSITION);
	}
	
	void A_DrunkMissileDeath()
	{
		A_SetTranslucent(0.66, 1);
		A_Explode(8, 8);
	}
	
	States
	{
		Spawn:
			MISL A 1 Bright A_DrunkMissileSeek;
			Loop;
		
		Death:
			EXPL A 2 Bright A_DrunkMissileDeath;
			EXPL BCDEFGH 2 Bright A_FadeOut(0.2);
			Stop;
	}
}

// Only kept over because SBARINFO needs it right now.
Class DD_HeatSeekMode : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
	}
}

// Heat Seek Card
Class DD_HasHeatSeekCard : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		
		+Inventory.Undroppable
		+Inventory.Untossable
	}
}

Class DD_HeatSeekCard : Inventory
{
	Default
	{
		//$Title "Heat Seek Card"
		//$Sprite HSKCA0
		//$Category "Ammunition"
		//$NotAngled
		
		Radius 14;
		Height 36;
		Scale 0.12;
		Inventory.Icon "STSEEKC";
		Inventory.PickupMessage "$DD_GOTHEATSEEK";
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupSound "misc/upgradenotify";

		+Inventory.BigPowerUp
	}

	States
	{
		Spawn:
			HSKC A -1;
			Stop;
	}
}

// Rocket Ammo Pickup
Class DD_RocketAmmo : Ammo
{
	Default
	{
		//$NotAngled
		//$Category "Ammunition"
		//$Color 6
		//$Sprite AMM5A0
		//$Title "Rockets"
		
		Scale 0.08;
		Radius 22;
		Height 32;
		Inventory.Icon "AMM5A0";
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTROCKETS";
		Inventory.Amount 2;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 4;
		Ammo.BackpackMaxAmount 100;
	}

	States
	{
		Spawn:
			AMM5 A -1;
			Stop;
	}
}

Class DD_DroppedAmmoRocket : DD_RocketAmmo
{
	Default
	{
		Scale 0.20;
		Radius 20;
		Height 32;
		Inventory.Amount 1;
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTSMALLROCKETS";

		+DontGib
		+Inventory.IgnoreSkill
	}

	States
	{
		Spawn:
			SAM3 A 280 Bright;
			Stop;
	}
}

Class DD_RocketLauncher : DD_Weapon
{
	Default
	{
		//$Title "Rocket Launcher"
		//$Sprite GUN5A0
		Scale 0.10;
		Radius 24;
		Height 20;
		Inventory.PickupMessage "$DD_GOTRLAUNCH";
		Inventory.Icon "GUN5A0";
		Weapon.SelectionOrder 2500;
		Weapon.UpSound "weapons/raiseHeavy";
		Weapon.BobSpeed 0.3;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 2;
		Weapon.AmmoType "DD_RocketAmmo";
		Weapon.Kickback 750;
		Tag "$DD_GOTRLAUNCH";
	}
	
	bool heatseektoggle;	// this needs to be declared both on the missile launcher AND the player/invoker
	
	// A simple check to see if the carrier has a heat seeker card
	action bool CheckHeatSeekCard()
	{
		return CountInv("DD_HeatSeekCard");
	}
	
	// This used to be handled via ACS. Not anymore
	action bool CheckHeatSeekMode()
	{
		// Due to how action functions work, we need this variable declared here
		// on the rocket launcher and on the player itself.
		return invoker.heatseektoggle;
	}
	
	// it only makes sense to be able to toggle this only when you're
	// using the weapon.
	action void FToggleHeatSeeker()
	{
		A_PlaySound("weapon/rockltoggle/on", CHAN_WEAPON | CHAN_UI);
		invoker.heatseektoggle = !invoker.heatseektoggle;	// increment
		
		A_SetInventory("DD_HeatSeekMode", (int)(invoker.heatseektoggle));
	}
	
	// If the weapon is toggled to heat seek...
	action bool CheckToFireHeatSeeker()
	{
		return (CheckHeatSeekCard() && CheckHeatSeekMode());
	}
	
	// This is only used in the rocket launcher functions below...
	// so mark it private
	private action void A_RLCheckCrush()
	{
		// if the player has a crush flag, make it so they
		// kick the grub/enemy using their foot
		if (CountInv("DD_CrushFlag") > 0)
		{
			// Do it in an overlay
			A_Overlay(DD_PSP_FOOTCRUSH, "FootCrush");
			A_TakeInventory("DD_CrushFlag", 255);	// To prevent spamming.
		}
	}
	
	// Rocket launcher 'weapon ready' function
	action void A_DDRLReady()
	{
		// Only allow +USER1 if we have the heatseeker card
		// otherwise don't bother...
		if (CheckHeatSeekCard())
			A_WeaponReady(WRF_ALLOWUSER1);
		else
			A_WeaponReady();
		
		A_RLCheckCrush();
	}
	
	action void A_DDRLReady2()
	{
		A_WeaponReady();
		A_RLCheckCrush();
		A_WeaponOffset(0, 32);
	}
	
	States
	{
		User1:
			"####" A 1
			{
				A_WeaponReady(WRF_NOFIRE);
				A_Overlay(DD_PSP_MISC1, "ToggleHeatSeeker", true);
				A_WeaponOffset(0, 34);
			}
			Goto Ready.NoUser;
		
		ToggleHeatSeeker:
			TNT1 A 5 FToggleHeatSeeker;
			Stop;
		
		Ready.NoUser:
			"####" A 0 { A_WeaponReady(WRF_NOFIRE); return CheckToFireHeatSeeker() ? ResolveState("Ready.NoUser.Heatseek") : ResolveState("Ready.NoUser.Normal"); }
			Loop;
			
		Ready.NoUser.Heatseek:
			MISG A 0;
			Goto Ready.NoUser.Real;
		
		Ready.NoUser.Normal:
			MS2G A 0;
			Goto Ready.NoUser.Real;
		
		Ready.NoUser.Real:
			"####" A 4 A_DDRLReady2;
			Goto Ready.Real;
		
		Ready:
			MISG A 0;
			Goto Ready.Real;
		
		Ready.Normal:
			MISG A 0;
			Goto Ready.Real;
		
		Ready.HeatSeek:
			MS2G A 0;
			Goto Ready.Real;
		
		Ready.Real:
			"####" A 1 A_DDRLReady;
			"####" A 1 { A_WeaponReady(); return CheckToFireHeatSeeker() ? ResolveState("Ready.HeatSeek") : ResolveState("Ready.Normal"); }
			Loop;
		
		Deselect:
			MISG A 0 { return CheckToFireHeatSeeker() ? ResolveState("Deselect.HeatSeek") : ResolveState(null); }
			Goto Deselect.Normal;
		
		Deselect.Normal:
			MISG A 0;
			Goto Deselect.Real;
			
		Deselect.HeatSeek:
			MS2G A 0;
			Goto Deselect.Real;
			
		Deselect.Real:
			"####" A 0 A_Lower;
			"####" A 0 A_Lower;
			"####" A 0 A_Lower;
			"####" A 1 A_Lower;
			Wait;
		
		Select:
			MISG A 0 { return CheckToFireHeatSeeker() ? ResolveState("Select.HeatSeek") : ResolveState(null); }
			Goto Select.Normal;
			
		Select.Normal:
			MISG A 0;
			Goto Select.Real;
			
		Select.HeatSeek:
			MS2G A 0;
			Goto Select.Real;
			
		Select.Real:
			"####" A 1 A_Raise;
			Wait;
		
		Fire:
			MISG B 1
			{
				A_TakeInventory("DD_CrushFlag", 1);	// don't bother animating the foot if we're shooting the rocket launcher.
				
				if (CheckForPepperPowerup()) return CheckToFireHeatSeeker() ? ResolveState("Fire.Shoutime.HeatSeek") : ResolveState("Fire.Shoutime");
				
				return CheckToFireHeatSeeker() ? ResolveState("Fire.HeatSeek") : ResolveState(null);
			}
			Goto Fire.Normal;
		
		Fire.Normal:
			MISG A 8 A_FireProjectile("DD_FiredRocket");
			MISG B 12;
			MISG B 12 A_ReFire;
			Goto Ready.Real;
		
		Fire.Shoutime.Normal:
			MISG A 2 A_WeaponOffset(0, 34);
			MISG A 3
			{
				int i = -2;
				
				for (i = -2; i <= 6; i += 2)
				{
					A_TakeInventory("DD_RocketAmmo", 1);
					A_FireProjectile("DD_SmolRocket", 0, false, i, FPF_NOAUTOAIM);	// Fire missile in a spread
					
					i += 2;
				}
				A_WeaponOffset(0, 38);
			}
			MISG B 12 A_WeaponOffset(0, 32);
			MISG B 12 A_ReFire;
			Goto Ready.Real;
		
		Fire.HeatSeek:
			MS2G A 8 A_FireProjectile("DD_FiredRocketSeeker");
			MS2G B 8;
			MS2G B 12 A_ReFire;
			Goto Ready.Real;
		
		Fire.Shoutime.HeatSeek:
			MS2G A 1 A_WeaponOffset(0, 34);
			MS2G B 2
			{
				int i = -6;
				
				bool takeornot = Random[ShoutimeSeek](0, 1);	// randomly we decide wether or not to take ammo
				
				for (i = -6; i <= 6; i += 2)
				{
					takeornot = takeornot & (Random[ShoutimeSeek](0, 127) % 2);		// randomize taking of ammo
					
					A_FireProjectile("DD_DrunkRocket", 0, Random[ShoutimeSeek](0, 1), i, FPF_NOAUTOAIM);	// Fire drunken missiles
				}
				
				A_WeaponOffset(0, 38);
			}
			MS2G B 6 A_WeaponOffset(0, 32);
			MS2G B 12 A_ReFire;
			Goto Ready.Real;
		
		Flash:
			MISF A 3 Bright A_Light2;
			MISF B 3 Bright A_Light1;
			TNT1 A 0 A_Light0;
			Stop;
		
		Spawn:
			GUN5 A -1;
			Stop;
	}
}
