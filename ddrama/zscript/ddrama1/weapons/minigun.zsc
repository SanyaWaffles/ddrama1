/* *******************************************************************
 *		minigun.zsc
 *
 *		Minigun
 *
 *		As long as you attribute these functions to me in some
 *		way I don't mind people using these. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// Minigun ammo pickup
Class DD_AmmoBelt : Ammo
{
	Default
	{
		//$NotAngled
		//$Category "Ammunition"
		//$Color 6
		//$Sprite AMM4A0
		//$Title "Minigun belt"
		
		Scale 0.12;
		Radius 20;
		Height 32;
		Inventory.Icon "AMM4A0";
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTMGABELT";
		Inventory.Amount 40;
		Inventory.MaxAmount 250;
		Ammo.BackpackAmount 40;
		Ammo.BackpackMaxAmount 500;
	}

	States
	{
		Spawn:
			AMM4 A -1;
			Stop;
	}
} 

// Minigun ammo dropped thing
Class DD_DroppedAmmoBelt : DD_AmmoBelt
{
	Default
	{
		Scale 0.20;
		Radius 20;
		Height 32;
		Inventory.Amount 15;
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTSMALLBELTS";

		+DontGib
		+Inventory.IgnoreSkill
	}

	States
	{
		Spawn:
			SAM2 A 280 Bright;
			Stop;
	}
}

Class DD_Minigun : DD_Weapon
{
	Default
	{
		//$Title "Minigun"
		//$Sprite GUN4A0
		Scale 0.10;
		Radius 26;
		Height 22;
		Inventory.PickupMessage "$DD_GOTMINIGUN";
		Inventory.Icon "GUN4A0";
		Weapon.SelectionOrder 700;
		Weapon.UpSound "weapons/raiseB";
		Weapon.BobSpeed 0.3;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "DD_AmmoBelt";
		Weapon.Kickback 500;
	}
	
	action void A_DDMinigunReady()
	{
		A_DDWeaponReady();
		A_TakeInventory("DD_MinigunCount", 1);
	}
	
	action void A_DDMinigunTics()
	{
		// only alter tics/rev up if we have no genodicer power
		if (!CheckForPepperPowerup()) A_SetTics(9 - CountInv("DD_MinigunCount"));	// counter acts as a way to rev up...
	}
	
	action void A_DDMinigunFire()
	{
		A_GunFlash("Flash");
		A_PlaySound("weapons/minigunf", CHAN_WEAPON);		
		A_FireBullets(1.2, 0, 1, random[Minigun](4,6), "DD_BulletPuff");
		A_GiveInventory("DD_MinigunCount", 1);
		
		A_DDMinigunTics();
	}
	
	action state A_DDMinigunCheck()
	{
		A_ReFire();
		
		if(CountInv("DD_MinigunCount") > 0) return ResolveState(null);
		
		return ResolveState("Ready");
	}
	
	action void A_DDMinigunWindDownStart()
	{
		A_DDWeaponReady();
		A_ReFire();
	}
	
	action void A_DDMinigunWindDownMid()
	{
		A_TakeInventory("DD_MinigunCount", 1);
		A_DDMinigunTics();
		A_DDMinigunWindDownStart();
	}
	
	States
	{
		Ready:
			CHGG B 1 A_DDMinigunReady;
			Loop;
		
		Deselect:
			CHGG B 0 A_Lower;
			CHGG B 0 A_Lower;
			CHGG B 1 A_Lower;
			Loop;
		
		Select:
			CHGG B 1 A_Raise;
			Loop;
		
		Fire:
			CHGG B 2;
			CHGG C 2 A_DDMinigunFire;
			CHGG C 1 A_DDMinigunCheck;
			Goto FireWindDown;
			
		FireWindDown:
			CHGG B 2 A_DDMinigunWindDownStart;
			CHGG CB 2 A_DDMinigunWindDownMid;
			CHGG C 1 A_DDMinigunCheck;
			Loop;
		
		Flash:
			CHGF C 2 Bright
			{
				A_DDMinigunTics();
				A_Light1();
			}
			TNT1 A 0 A_Light0;
			Stop;
		
		Spawn:
			GUN4 A -1;
			Stop;
	}
}

//$GZDB_SKIP

// Minigun rev-up counter
Class DD_MinigunCount : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 8;
	}
}
