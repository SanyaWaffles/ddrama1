/* *******************************************************************
 *		shotgun.zsc
 *
 *		Shotgun
 *
 *		As long as you attribute these functions to me in some
 *		way I don't mind people using these. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

// Shell Ammo Pickup
Class DD_Shells : Ammo
{
	Default
	{
		//$NotAngled
		//$Category "Ammunition"
		//$Color 6
		//$Sprite AMM3A0
		//$Title "Shotgun shells"

		Scale 0.12;
		Radius 20;
		Height 32;

		Inventory.Icon "AMM3A0";
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTSHELLS";
		Inventory.Amount 10;
		Inventory.MaxAmount 50;
		Ammo.BackpackAmount 20;
		Ammo.BackpackMaxAmount 100;
	}

	States
	{
		Spawn:
			AMM3 A -1;
			Stop;
	}
}

Class DD_DroppedShells : DD_Shells
{
	Default
	{
		Scale 0.20;
		Radius 20;
		Height 32;
		Inventory.Amount 4;
		Inventory.PickupSound "pickups/generic";
		Inventory.PickupMessage "$DD_GOTSMALLSHELLS";

		+DontGib
		+Inventory.IgnoreSkill
	}

	States
	{
		Spawn:
			SAM1 A 280 Bright;
			Stop;
	}
}

Class DD_ShotgunShouCount : Inventory
{
	Default
	{
		Inventory.Amount 1;
		Inventory.MaxAmount 5;
	}
}

// A reloading shotgun
Class DD_Shotgun : DD_Weapon
{
	Default
	{
		//$Title "Shotgun"
		//$Sprite GUN3A0
		Scale 0.10;
		Radius 28;
		Height 14;
		Inventory.PickupMessage "$DD_GOTSHOTGUN";
		Inventory.Icon "GUN3A0";
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "DD_Shells";
		Weapon.Kickback 300;
	}
	
	action state A_DDShotgunCheck()
	{
		A_DDClearCrushFlag();
		
		return CheckForPepperPowerup() ? ResolveState("Fire.Shoutime") : ResolveState(null);
	}
	
	action void A_DDShotgunFire()
	{
		A_GunFlash();
		A_PlaySound("weapons/shotgunf", CHAN_WEAPON);
		A_FireBullets(5.6, 0, 7, 5, "DD_BulletPuff");
	}
	
	action state A_DDShotgunShouFire()
	{
		A_GiveInventory("DD_ShotgunShouCount", 1);
		A_GunFlash();
		A_FireBullets(2.0, 0, 7, 5, "DD_BulletPuff");
		A_PlaySound("weapons/shotgunf", CHAN_WEAPON);
		
		return (CountInv("DD_ShotgunShouCount") >= 5) ? ResolveState("Fire.ShoutimeStoppu") : ResolveState(null);
	}
	
	action void A_DDShotgunShouReset()
	{
		// A_TakeInventory("DD_ShotgunShouCount", 255);
		
		A_SetInventory("DD_ShotgunShouCount", 0);
		A_PlaySound("weapons/shotgunpump", CHAN_WEAPON);
	}

	States
	{
		Ready:
			SHTG A 1 A_DDWeaponReady;
			Loop;
		
		Deselect:
			SHTG A 0 A_Lower;
			SHTG A 0 A_Lower;
			SHTG A 0 A_Lower;
			SHTG A 1 A_Lower;
			Loop;
		
		Select:
			SHTG A 0 A_Raise;
			SHTG A 1 A_Raise;
			Loop;
		
		Fire:
			SHTG A 1 A_DDShotgunCheck;
			Goto Fire.Normal;
		
		Fire.Normal:
			SHTG A 6 A_DDShotgunFire;
			SHTG BC 5;
			SHTG D 4;
			SHTG CB 5;
			SHTG A 7 A_ReFire;
			Goto Ready;
		
		Fire.Shoutime:
			SHTG A 4 A_DDShotgunShouFire;
			SHTG B 5;
			Loop;
		
		Fire.ShoutimeStoppu:
			SHTG B 5 A_DDShotgunShouReset;
			SHTG C 5 A_WeaponOffset(0, 36);
			SHTG D 35 A_WeaponOffset(0, 40);
			SHTG C 5 A_WeaponOffset(0, 36);
			SHTG B 5 A_WeaponOffset(0, 32);
			SHTG A 7 A_ReFire;
			Goto Ready;
		
		Flash:
			SHTF A 4 Bright A_Light2;
			SHTF B 3 Bright A_Light1;
			TNT1 A 0 A_Light0;
			Stop;
		
		Spawn:
			GUN3 A -1;
			Stop;
	}
}
