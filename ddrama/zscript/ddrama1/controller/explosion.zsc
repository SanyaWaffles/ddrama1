/* *******************************************************************
 *		explosion.zsc
 *
 *		Explosion Chain and Spots for Daytime Drama
 *
 *		As long as you attribute it to me in some
 *		way I don't mind people using this. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */
 
Class DD_ExplosionChainController : DD_SwitchableController
{
	Default
	{
		//$Title "Explosion Chain"
		//$Category "Controllers"
		//$Sprite internal:ExplLink
		
		//$Arg0 "Spot Range 1"
		//$Arg0Default 0
		//$Arg0Tooltip "Explosion Spot Range 1\nWhatever range # is higher will be the upper limit"
		//$Arg0Type 0		
		
		//$Arg1 "Spot Range 2"
		//$Arg1Default 0
		//$Arg1Tooltip "Explosion Spot Range 2\nWhatever range # is higher will be the upper limit"
		//$Arg1Type 0
		
		//$Arg2 "Duration"
		//$Arg2Default 0
		//$Arg2Tooltip "If zero, will be a random duration\nbetween 1 and 35 tics"
		//$Arg2Type 0
		
		//$Arg3 "Sector Effect Type"
		//$Arg3Default 1
		//$Arg3Tooltip "What to do for the sector tagged"
		//$Arg3Type 11
		//$Arg3Enum { 0 = "None"; 1 = "Lower Floor"; 2 = "Raise Ceiling"; 3 = "Lower Floor Lowest"; }
		
		//$Arg4 "Sector Tag"
		//$Arg4Default 0
		//$Arg4Tooltip "Sector to change tag"
		//$Arg4Type 13

		Radius 12;
		Height 24;

		+NoBlood
		+NoGravity
		+Float
	}
	
	enum EExplodeSpotChanges
	{
		EXPLODEChange_None = 0,
		EXPLODEChange_FloorLower,
		EXPLODEChange_CeilingRaise,
		EXPLODEChange_FloorLowerLowest,
	};
	
	const EXPLODEChange_SPEED = 1024;
	
	int range[2];		// Range Array
	int expcount;		// Explosion counter
	int timedur;		// Duration between each explosion
	int changetype;		// stores the changed type
	int sect;			// stores effected sector
	int currid;			// stores current id
	int tix;			// stores tics
	bool timetostart;	// when true, it's time to start
	
	// return true if o is less than p
	private bool CheckTagRange(int o, int p)
	{
		return (o < p) ? true : false;
	}
	
	override void PostBeginPlay()
	{
		bool swap = CheckTagRange(args[0], args[1]);	// check the range of tags
		timetostart = false;	// we can't start yet!
		
		// if args[0] is greater than args[1]
		// we need to put it in the proper range[i]
		range[0] = swap ? args[0] : args[1];	// swap tag 1
		range[1] = swap ? args[1] : args[0];	// swap tag 2
		
		if (args[2] <= 0)
			timedur = Random[Explosion](4, 32);	// randomize explosion
		else
			timedur = args[2];
		
		currid = range[0];
		
		if (args[4] > 0)
		{
			// clamp args[3] between 0 and 3
			if (args[3] > EXPLODEChange_FloorLowerLowest)
				args[3] = EXPLODEChange_FloorLowerLowest;
			
			if (args[3] < EXPLODEChange_None)
				args[3] = EXPLODEChange_None;
			
			changetype = args[3];	// apply changetype
			
			sect = args[4];	// apply sector tag
		}
		else
		{
			// since the sector is invalid we need to set the change type to none.
			changetype = EXPLODEChange_None;
		}
		
		tix = 35;	// set tix to 35
	}
	
	void A_ChangeSectorGeom()
	{
		switch (changetype)
		{
			default:
			case EXPLODEChange_None:
				break;
			
			case EXPLODEChange_FloorLower:
				Floor_LowerToNearest(sect, EXPLODEChange_SPEED);
				break;
			
			case EXPLODEChange_CeilingRaise:
				Ceiling_RaiseToNearest(sect, EXPLODEChange_SPEED);
				break;
			
			case EXPLODEChange_FloorLowerLowest:
				Floor_LowerToLowest(sect, EXPLODEChange_SPEED);
				break;
		}
	}
	
	void A_DDExplodeSpotCtrl()
	{
		if (timetostart)
		{
			if (!(tix % 35))
			{
				Thing_Activate(currid);
				currid++;
				
				if (currid > range[1]) timetostart = false;
			}
			
			A_SetTics(timedur);
		}
	}

	States
	{
		Spawn:
			TNT1 A 1 A_DDExplodeSpotCtrl;
			Loop;
	}
	
	override void Activate(Actor activator)
	{
		timetostart = true;
		
		if (currid == range[0]) A_ChangeSectorGeom();
	}
}

// Actual Explosion Spot
Class DD_ExplosionSpot : DD_SwitchableController
{
	Default
	{
		//$Title "Explosion Spot"
		//$Category "Controllers"
		//$Sprite internal:ExplSpot
		//$NotAngled
		
		Activation THINGSPEC_ThingActs | THINGSPEC_Activate;
		Radius 18;
		Height 36;
		RenderStyle "Add";
		Alpha 0.6;
		Obituary "$OB_BARREL";
		DeathSound "misc/explosion2";
		
		+DontGib
	}
	
	void A_DDExplodeSpotDeath()
	{
		A_SetScale(0.22);
		A_PlaySound("misc/explosion2", CHAN_6);
		A_Explode(32, 20, XF_NOTMISSILE);
		A_QuakeEx(4, 4, 4, 24, 0, 1024, "world/rumble");
	}
	
	States
	{
		Spawn:
			TNT1 A -1;
			Stop;
		
		Active:
			EXPL A 0 Bright A_Die;
			Goto Death;
		
		Death:
			EXPL A 3 Bright A_DDExplodeSpotDeath;
			EXPL BCDEFG 3 Bright;
			EXPL H 1 A_FadeOut(0.3, true);
			Wait;
	}
}

