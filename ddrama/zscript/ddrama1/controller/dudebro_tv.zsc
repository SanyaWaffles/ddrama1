/* *******************************************************************
 *		dudebro_tv.zsc
 *
 *		Dudebro Television Breaker for Daytime Drama
 *
 *		As long as you attribute it to me in some
 *		way I don't mind people using this. Considering how much
 *		some people have caused an uproar over the lack of proper
 *		examples and the like.
 *
 *		Copyright Sanya K. C. Waffles 2013-2017
 *
 * ****************************************************************** */

/* Dedicated Dudebrony Spot for fast checking
 *
 */
Class DD_DudebronySpot : SpecialSpot
{
	Default
	{
		//$Sprite internal:DBro_Cont
		//$Title "Dudebro Spot"
		//$Category "Controllers"
		//$NotAngled
	}
}

/*
 * Acts as a controller for observing your fucking about
 * their TVs. The dudebronies don't like it when you
 * fuck with their TVs. Normally I wouldn't blame
 * them but they are working with Junko so fuck
 * them.
 *
 * ... then again they aren't the checksum unicorns.
 */
Class DD_DudebronyObservingController : DD_Controller
{
	Default
	{
		//$Sprite internal:DBro_Cont
		//$Title "Dudebro Observance"
		//$Category "Controllers"
		//$NotAngled
		
		+NoGravity
		+Float
	}
	
	// dudebro tags start at 666
	enum EDudeBroTags
	{
		DBDOORTAG = 666,
		DBBOSSATAG,
		DBBOSSBTAG,
	};
	
	// amount of tvs, alive tvs, game skill, delaytics, dudebros to spawn
	int tvcount, tvalive, objskill, delaytics, dudebrocnt;
	
	// spawned all the dudebros
	bool spawnedbro;
	
	override void Tick()
	{
		delaytics++;	// increment each tic at the beginning...
		
		// only do this every 5 tics to prevent bogging.
		if ((delaytics % 5) == 0)
		{
			// Set up Iterator
			ThinkerIterator tvfinder = ThinkerIterator.Create("DD_DudebroTVController");
			Actor tvmo;
			
			tvcount = 0;	// initialize these
			tvalive = 0;	// initialize these
			objskill = G_SkillPropertyInt(SKILLP_ACSReturn);	// fetch the skill
			
			// search for the tv controllers. Check to see if they are alive.
			while (tvmo = DD_DudebroTVController(tvfinder.Next()))
			{
				if (tvmo)
				{
					// if it exists, increment
					tvcount++;
					
					// check if alive .. if so, increment
					if (tvmo.health > 0) tvalive++;
				}
			}
			
			// if these exist on the map we do some checks
			if (tvcount > 0)
			{
				/* if the routine to spawn bronies of despair
				 * is not set up, wwe need to do that.
				 * ------------------------------------
				 * this only needs to be done however
				 * on Hard and Discourse modes
				 */
				if (!spawnedbro && objskill >= 2)
				{
					/* check if half or less TVs are dead...
					 * if they are, set up how many dudebros to spawn...
					 */
					if (tvalive <= (tvcount / 2))
					{
						// Set up Iterator
						ThinkerIterator dbspotfinder = ThinkerIterator.Create("DD_DudebronySpot");
						Actor smo;
						Actor bro;
						
						// search for the tv controllers. Check to see if they are alive.
						while (smo = DD_DudebronySpot(dbspotfinder.Next()))
						{
							// if spot exists
							if (smo)
							{
								if (!(level.nomonsters || sv_nomonsters))
								{
									// Only spawn monsters if not -nomonsters
									bro = Spawn("DD_BronyOfDespair", smo.pos, ALLOW_REPLACE);
									if (bro)
									{
										smo.A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
									}
								}
							}
						}
						
						spawnedbro = true; // welp, we spanwed the bros
					}
				}
				
				// if no TVs remain, we should trigger the actual bosses
				// and open the door tagged
				if (tvalive <= 0)
				{
					Door_Open(DBDOORTAG, 64, 0);	// open door tagged 666
					
					Thing_Activate(DBBOSSATAG);		// Boss #1A is activated
					Thing_Activate(DBBOSSBTAG);		// Boss #1B is activated
					
					// TODO: why did I do this?
					// SetActivatorToTarget(0);
				}
			}
		}
		
		/* if tics are 35 or higher, reset to 0.
		 * we don't need any higher precision due
		 * to 35 tics per second. */
		if (delaytics >= 35) delaytics = 0;
		
		Super.Tick();
	}
	
	override void BeginPlay()
	{
		// init these variables
		delaytics = 0;
		dudebrocnt = 0;
		spawnedbro = false;
		Super.BeginPlay();
	}
}

/* Dudebro Television Breaker
 *
 * calls ACS cookbook library script on death
 *
 *	DDLib_Dudebro_BreakCounter
 *
 * Each time this is called it increments a counter which,
 * when it hits 0, it opens the doors and causes dudebro
 * tech support blokes to chase you.
 *
 * It also causes the line ID (arg0) to "break"
*/
Class DD_DudebroTVController : DD_ShootableController
{
	Default
	{
		//$Sprite internal:DBro_Cont
		//$Title "Dudebro TV"
		//$Category "Controllers"
		//$NotAngled
		//$Arg0 "Line To Break"
		//$Arg0Default 0
		//$Arg0Tooltip "Changes Front Middle Texture of Given Line ID"
		//$Arg0Type 15
		
		Radius 20;
		Height 40;
	}
	
	const DUDEBRONY_SPAWNSPOT_ID = 669;
	const DUDEBRONY_MAXTVS = 8;
	
	void A_DestroyDBroTV(void)
	{
		if (args[0] > 0)
		{
			CallACS("DDLib_Dudebro_TVBreakOnly", args[0]);	// we can only change textures in ACS for now.
			
			Actor mo = null;
			int i;
			for(i = (random[TVDebris]()&3)+3; i; i--)
			{
				mo = Spawn("DD_MetalJunk", Pos, ALLOW_REPLACE);
				if (mo != null)
				{
					mo.Vel.X = random2[TVDebris]() / 64.;
					mo.Vel.Y = random2[TVDebris]() / 64.;
					mo.Vel.Z = ((random[TVDebris]() & 7) + 5) * 0.75;
				}
			}
			
			A_PlaySound("misc/tcanbreak", CHAN_BODY, 0.7, false, 0.5);	//hmm
			A_PlaySound("brony/dudebrotv", CHAN_VOICE);
		}
	}

	States
	{
		Spawn:
			TNT1 A -1;
			Stop;
		
		Death:
			TNT1 A 0 A_DestroyDBroTV;
			TNT1 A -1;
			Stop;
	}
}
